#!/usr/bin/env lua
-- vim: filetype=lua ts=2 sw=2 sts=2 et :
local b4={}; for k,_ in pairs(_ENV) do b4[k]=k end
local about=[[
 ,-_|\   Contrast set learning
/     \  (c) Tim Menzies, 2021, unlicense.org
\_,-._*  Cluster, then report just the 
     v   deltas between nearby clusters.]]
local function config() return {
  bins= {.5     ,'Bins are of size n**BINS'},
  cols= {'x'    ,'Columns to use for inference'},
  data= {'../data/auto2.csv' 
                ,'Where to read data'},
  far=  {.9     ,'Where to look for far things'},
  goaL= {'best' ,'Learning goals: best|rest|other'},
  iota= {.3     ,'Small = sd**iota'},
  k=    {2      ,'Bayes low class frequency hack'},
  m=    {1      ,'Bayes low range frequency hack'},
  p=    {2      ,'Distance calculation exponent'},
  some= {20     ,'Number of samples to find far things'},
  seed= {10013  ,'Seed for random numbers'},
  top=  {10     ,'Focus on this many'},
  un=   {false  ,'Run eegs, no protection'},
  loud= {false  ,'Set verbose'},
  eg=   {""     ,"'-x ls' lists all, '-x all' runs all"}} end

-----------------------------------------------------------
local argparse = require("argparse")
local Obj,Num,Sym = {},{},{}   -- objects
local sorted,sort,map,copy,per -- lists
local fmt,color,dump,rump,pump -- strings
local round,Seed,rand -- maths
local csv             -- files
local run,cli,main    -- main
local Eg              -- unit  tests

--- Num ---------------------------------------------------
function Num:new(at,s,      w)
  s = s or ""
  return Obj.new(self,"Num",{
    s =s,     n=0,        _all= {}, 
    ok=false, at=at or 0, w=s:match("-") and -1 or 1}) end

function Num:mid() return per(self:all(),.5) end
function Num:var() return per(self:all(),.5) end

function Num:all()
  if     not self.ok 
  then   self.ok=true; self._all = sort(self._all) end
  return self._all end

function Num:adds(a) 
  for _,x in pairs(a) do self:add(x) end 
  return self end

function Num:add(x)
  if  x ~= "?" then
    self.n = self.n + 1
    self._all[ 1 + #self._all] = x
    self.ok= false end
  return x end 

--- lists --------------------------------------------------
function sorted(t,         i,keys)
  i,keys = 0,{}
  for k in pairs(t) do keys[#keys+1] = k end
  table.sort(keys)
  return function ()
    if i < #keys then
      i=i+1; return keys[i], t[keys[i]] end end end

function sort(a,f)
  table.sort(a, f or function(x,y) return x<y end)
  return a end

function map(a,f,     b)
  b, f = {}, f or function(z) return z end
  for i,v in pairs(a or {}) do b[i] = f(v) end 
  return b end 

function copy(t) return type(t)~='table' and t or map(t,copy) end

function per(a,p) 
  return a[math.max(1,math.floor(#a*(p or .5)))] end

--- strings -----------------------------------------------
function fmt(s,...) return io.write(s:format(...)) end 

function color(s,...)
  local x={red=31, green=32, yellow=33, purple=34}
  print('\27[1m\27['..x[s]..'m'..string.format(...)..'\27[0m') end

function dump(o,     sep,s)
  sep, s = "", (o._name or "") .."{"
  if (#o > 0) then
    for i=1,#o do
      s=s .. sep .. tostring(o[i])
      sep=", " end 
  else
    for k,v in sorted(o) do 
      if k:sub(1,1) ~= "_" then
        s=s .. sep .. tostring(k).."="..tostring(v)
        sep=", " end end end
  return s.."}" end

function rump(t,pre,    indent,fmt)
  pre, indent = pre or "", indent or 0
  if indent < 10 then
    for k, v in pairs(t or {}) do
      if not (type(k)=='string' and k:match("^_")) then
        fmt= pre..string.rep("|  ",indent)..tostring(k)..": "
        if type(v) == "table" then
          print(fmt)
          rump(v, pre, indent+1)
        else
          print(fmt .. tostring(v)) end end end end end

function pump(o) print(dump(o)) end

--- maths -------------------------------------------------
function round(num, decimals,      mult)
  mult = 10^(decimals or 0)
  return math.floor(num * mult + 0.5) / mult end

Seed = 10013
function rand(lo,hi,     mult,mod)
  lo,hi = lo or 0, hi or 1
  mult, mod = 16807.0, 2147483647.0
  Seed = (mult * Seed) % mod 
  return lo + (hi-lo) * Seed / mod end 

--- file --------------------------------------------------
function csv(file,       split,stream,tmp)
  stream = file and io.input(file) or io.input()
  tmp    = io.read()
  return function(       t)
    if tmp then
      tmp = tmp:gsub("[\t\r ]*",""):gsub("#.*","")
      t={}; for y in string.gmatch(tmp, "([^,]+)") do t[#t+1]=y end
      tmp = io.read()
      if #t > 0 then
        for j,x in pairs(t) do t[j]=tonumber(x) or x end
        return t end
    else
      io.close(stream) end end end

function Obj:new(name, new)
  new = new or {}
  setmetatable(new, self)
  self.__tostring = dump 
  self.__index    = self
  self._name      = name
  return new end

function cli(what,about,t,       arg,b4)
  arg = argparse(what, about)
  for flag,v in sorted(t) do
    flag = "--"..flag
    b4 =" (default: "..tostring(v[1])..")"
    if     v[1]==false
    then   arg:flag(flag, v[2],  v[1])
    elseif type(v[1])=="number"
    then   arg:option(flag, v[2]..b4, v[1],tonumber)
    else   arg:option(flag, v[2]    , v[1]) end end 
  return arg:parse() end

--- main -------------------------------------------------
function main(the,      fails)
  fails= 0
  if     the.eg=="all"
  then   for txt,meta in sorted(Eg) do
           fails=run(txt, fails, the) end 
  elseif the.eg=="ls" 
  then   print("\neegs:")
         for x,y in sorted(Eg) do fmt("  %-15s  %s",x,y.txt) end 
  elseif the.eg and Eg[the.eg] 
  then   fails = run(the.eg, fails, the) end
  for k,_ in pairs(_ENV) do if not b4[k] then print("?? "..k) end end
  os.exit(fails) end

function run(txt,fails,the,      it)
  the  = copy(the)
  Seed = the.seed
  it   = Eg[txt]
  if     the.un==true 
  then   print("unsafe:"); it.fun(the); os.exit(0)
  elseif pcall(function () it.fun(the); end)
  then   color("green","✔ % -15s  %s",txt,it.txt)
  else   color("red",  "✘ %-15s  %s",txt,it.txt); fails=fails+1 end 
  return fails end

--- unit tests ---------------------------------------------
Eg={}
Eg.sorted= {
  txt = "sorting items",
  fun = function(_) 
         for x,y in sorted{mm=10,zz=2,cc=3,aa=1} do 
           return assert(x=="aa" and y==1)  end end}

Eg.map= {
  txt="meta map functions",
  fun=function(_,  f) 
        f= function(z) return z*2 end
        assert(40 ==  map({10,20,30},f)[2]) end}

Eg.copy= {
  txt="deep copy",
  fun=function(_,        a,b) 
               a={1,{2,{3,{4},5},6},7}
               b=copy(a)
               a[2][2][2][1]=10 
        assert(b[2][2][2][1]==4)   end}

Eg.num={
  txt="number",
  fun=function(_,     n)
        n=Num:new()
        for i=1,10000 do n:add(round(rand(),2)) end
        n:var() end }
        
Eg.rand={
  txt="random numbers",
  fun=function(_,      a)
        a={}
        for i=1,10 do a[1+#a] = round(rand(),2) end 
        pump(sort(a)) end}

----------------------------------------------------------- 
main( cli("./keys", about, config()) )
