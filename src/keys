#!/usr/bin/env lua
-- vim: filetype=lua ts=2 sw=2 sts=2 et :
local b4={}; for k,_ in pairs(_ENV) do b4[k]=k end
local about=[[
 ,-_|\   Contrast set learning
/     \  (c) Tim Menzies, 2021, unlicense.org
\_,-._*  Cluster, then report just the 
     v   deltas between nearby clusters.]]
local argparse = require("argparse")
local Obj={}

local function config() return {
  bins=    {.5     ,'Bins are of size n**BINS'},
  cols=    {'x'    ,'Columns to use for inference'},
  data=    {'../data/auto2.csv', 
                   'Where to read data'},
  far=     {.9     ,'Where to look for far things'},
  goaL=    {'best' ,'Learning goals: best|rest|other'},
  iota=    {.3     ,'Small = sd**iota'},
  k=       {2      ,'Bayes low class frequency hack'},
  m=       {1      ,'Bayes low range frequency hack'},
  p=       {2      ,'Distance calculation exponent'},
  samples= {20     ,'Number of samples to find far things'},
  seed=    {10013  ,'Seed for random numbers'},
  top=     {10     ,'Focus on this many'},
  unsafe=  {false  ,'Run examples, no protection'},
  verbose= {false  ,'Set verbose'},
  xample=  {""     ,"'-x ls' lists all, '-x all' runs all"}} end

--[[ -------------------------------------------------------

Columns
=======

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi lorem
orci, facilisis ac sapien quis, maximus suscipit neque. Cras accumsan,
leo ac volutpat lobortis, lectus dolor auctor leo, at scelerisque
libero magna sit amet tellus. Etiam pulvinar vel massa sed placerat.
Phasellus malesuada arcu metus, condimentum accumsan mauris interdum
a. Nulla facilisi. Proin sit amet augue at lectus molestie vestibulum.
In imperdiet elit nunc, sit amet hendrerit elit mattis et. Quisque
dictum arcu tempus urna convallis, non dignissim purus accumsan. In
varius nec justo nec blandit. Nullam semper non odio sed ornare.
Quisque laoreet eget libero vel consequat. In hac habitasse platea
dictumst. Fusce sed bibendum risus, vitae sagittis nibh.

Cras molestie sed tortor eleifend venenatis. Aliquam molestie bibendum
magna eget porta. Sed at elementum arcu, sit amet volutpat nisl.
Quisque sit amet lectus nisl. Suspendisse aliquet aliquet iaculis. Ut
vitae elit bibendum, volutpat odio ac, tincidunt augue. Nunc eget
vehicula orci.

Proin bibendum ac odio ac mattis. Donec metus dui, ornare sit amet
erat euismod, congue convallis magna. Duis eu nibh vulputate, ornare
metus et, maximus orci. Proin risus ipsum, blandit quis venenatis et,
blandit et enim. Vivamus interdum vehicula elit, in mattis velit
ullamcorper at. Praesent imperdiet nunc lorem, in finibus orci
elementum ut. Pellentesque habitant morbi tristique senectus et netus
et malesuada fames ac turpis egestas. Aenean et velit sed nunc viverra
dictum sed at lectus. Fusce placerat pharetra mattis. Nullam eu
pharetra tortor, sed maximus tortor. Maecenas feugiat commodo mauris
sit amet commodo. Vivamus porta, nibh nec mollis feugiat, massa felis
maximus nibh, id condimentum risus odio quis dolor.

Proin nulla enim, condimentum facilisis ultricies at, iaculis at sem.
Suspendisse id velit purus. Curabitur a ornare metus. Quisque a orci
non leo porttitor bibendum nec quis nisl. Praesent maximus porta
iaculis. Duis pulvinar dapibus commodo. Fusce tempor lacinia sem
laoreet maximus. Sed at ex faucibus, semper mi ac, condimentum dolor.

Aliquam ut rutrum purus, a iaculis massa. Duis libero lectus, molestie
nec tempor et, scelerisque non velit. Cras porttitor augue id viverra
sollicitudin. Suspendisse elit nibh, sagittis nec dolor non, hendrerit
posuere nunc. Ut et ex metus. Nullam iaculis imperdiet ipsum, at
eleifend nulla bibendum iaculis. Etiam in purus eget urna semper
sodales. Sed consequat, diam eget eleifend rhoncus, leo ex auctor
ligula, aliquet egestas diam dolor vel massa.

--]]
local Num={}
function Num:new(at,s)
  return Obj.new(self,"Num",{
    at = at or 0, txt = s or "", n = 0,_all = {},ok = false,
    w = s:match("-") and -1 or 1}) end

function Num:add(x)
  if  x ~= "?" then
    self.n = self.n + 1
    self._all[ 1 + #self._all] = x
    self.ok= false end
  return x end 

-----------------------------------------------------------
--- Utils
local function sorted(t,         i,keys)
  i,keys = 0,{}
  for k in pairs(t) do keys[#keys+1] = k end
  table.sort(keys)
  return function ()
    if i < #keys then
      i=i+1; return keys[i], t[keys[i]] end end end

local function map(a,f,     b)
  b, f = {}, f or function(z) return z end
  for i,v in pairs(a or {}) do b[i] = f(v) end 
  return b end 

local function copy(t) return type(t)~='table' and t or map(t,copy) end

local function fmt(s,...) return io.write(s:format(...)) end 

local function color(s,...)
  local col={red=31, green=32, yellow=33, purple=34}
  print('\27[1m\27['.. col[s] ..'m'..string.format(...)..'\27[0m') end

function dump(o)
  local sep, s, keys = "", (o._name or "") .."{", {}
  for key,_ in pairs(o) do keys[#keys+1] = key end
  table.sort(keys)
  for _,k in pairs(keys) do 
    s=s .. sep .. tostring(k).."="..tostring(o[k])
    sep=", " end 
  return s.."}" end

local function rump(t,pre,    indent,fmt)
  pre, indent = pre or "", indent or 0
  if indent < 10 then
    for k, v in pairs(t or {}) do
      if not (type(k)=='string' and k:match("^_")) then
        fmt= pre..string.rep("|  ",indent)..tostring(k)..": "
        if type(v) == "table" then
          print(fmt)
          rump(v, pre, indent+1)
        else
          print(fmt .. tostring(v)) end end end end end

local function pump(o) print(dump(o)) end

local seed = 10013
local function park_miller_randomizer(     mult,mod)
  mult, mod = 16807.0, 2147483647.0
  seed = (mult * seed) % mod 
  return seed / mod end 

local function rand(lo,hi) 
  lo,hi = lo or 0, hi or 1
  return lo + (hi-lo)*park_miller_randomizer() end

local function csv(file,       split,stream,tmp)
  stream = file and io.input(file) or io.input()
  tmp    = io.read()
  return function(       t)
    if tmp then
      tmp = tmp:gsub("[\t\r ]*",""):gsub("#.*","")
      t={}; for y in string.gmatch(tmp, "([^,]+)") do t[#t+1]=y end
      tmp = io.read()
      if #t > 0 then
        for j,x in pairs(t) do t[j]=tonumber(x) or x end
        return t end
    else
      io.close(stream) end end end

function Obj:new(name, new)
  local new = new or {}
  setmetatable(new, self)
  self.__tostring = dump 
  self.__index    = self
  self._name      = name
  return new end

local function cli(what,about,t,       arg,b4)
  arg = argparse(what, about)
  for flag,v in sorted(t) do
    flag = "--"..flag
    b4 =" (default: "..tostring(v[1])..")"
    if     v[1]==false
    then   arg:flag(flag, v[2],  v[1])
    elseif type(v[1])=="number"
    then   arg:option(flag, v[2]..b4, v[1],tonumber)
    else   arg:option(flag, v[2]    , v[1]) end end 
  return arg:parse() end

-----------------------------------------------------------
--- Unit tests
local Eg={}
Eg.one= {
  txt = "demo",
  fun = function (the) 
        for k,v in sorted(Eg) do print(k, v.txt) end end}

Eg.two= {
  txt = "two two",
  fun = function  (the) print(the.seed) end }

-----------------------------------------------------------
--- Start up
local function run(name,fails,the,      fun,txt)
  the  = copy(the)
  seed = the.seed
  fun  = Eg[name].fun
  txt  = Eg[name].txt
  if     the.unsafe==true 
  then   print("unsafe:"); fun(the); os.exit(0)
  elseif pcall(function () fun(the) end)
  then   color("green","%-15s  %s\n",name,txt)
  else   color("red",  "%-15s  %s\n",name,txt); fails=fails+1 end 
  return fails end

local function main(the,      fails)
  fails= 0
  if     the.xample=="all" 
  then   for name,meta in sorted(Eg) do
         fails=run(name, fails, the) end 
  elseif the.xample=="ls" 
  then   print("\nexamples:")
         for x,y in sorted(Eg) do fmt("  %-15s  %s\n",x,y.txt) end 
  elseif the.xample and Eg[the.xample] 
  then   fails = run(the.xample, fails, the) end
  os.exit(fails) end
  
main( cli("./keys", about, config()) )
for k,_ in pairs(_ENV) do if not b4[k] then print("?? "..k) end end
